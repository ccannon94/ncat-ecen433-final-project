..... ...bf4e:   C04C                BIC.B   PC,R12bf50:   0000                .word   0x0000bf52:   0000                .word   0x0000bf54:   0000                .word   0x0000bf56:   0000                .word   0x0000bf58:   0000                .word   0x0000bf5a:   0000                .word   0x0000bf5c:   0000                .word   0x0000bf5e:   0000                .word   0x0000bf60:   0000                .word   0x0000bf62:   0000                .word   0x0000bf64:   0000                .word   0x0000bf66:   0000                .word   0x0000bf68:   0000                .word   0x0000bf6a:   0000                .word   0x0000bf6c:   0000                .word   0x0000bf6e:   0000                .word   0x0000bf70:   0000                .word   0x0000bf72:   0000                .word   0x0000bf74:   0000                .word   0x0000bf76:   0000                .word   0x0000bf78:   0000                .word   0x0000bf7a:   0000                .word   0x0000bf7c:   0000                .word   0x0000bf7e:   0000                .word   0x0000bf80:   0000                .word   0x0000bf82:   0000                .word   0x0000bf84:   0000                .word   0x0000bf86:   0000                .word   0x0000bf88:   0000                .word   0x0000bf8a:   0000                .word   0x0000bf8c:   0000                .word   0x0000bf8e:   0000                .word   0x0000bf90:   0000                .word   0x0000bf92:   0000                .word   0x0000bf94:   0000                .word   0x0000bf96:   0000                .word   0x0000bf98:   0000                .word   0x0000bf9a:   0000                .word   0x0000bf9c:   0000                .word   0x0000bf9e:   0000                .word   0x0000bfa0:   0000                .word   0x0000bfa2:   0000                .word   0x0000bfa4:   0000                .word   0x0000bfa6:   0000                .word   0x0000bfa8:   0000                .word   0x0000bfaa:   0000                .word   0x0000bfac:   0000                .word   0x0000bfae:   0000                .word   0x0000bfb0:   0000                .word   0x0000bfb2:   0000                .word   0x0000bfb4:   0000                .word   0x0000bfb6:   0000                .word   0x0000bfb8:   0000                .word   0x0000bfba:   0000                .word   0x0000bfbc:   0000                .word   0x0000bfbe:   0000                .word   0x0000bfc0:   0000                .word   0x0000bfc2:   0000                .word   0x0000bfc4:   0000                .word   0x0000bfc6:   0000                .word   0x0000bfc8:   0000                .word   0x0000bfca:   0000                .word   0x0000bfcc:   0000                .word   0x0000bfce:   0000                .word   0x0000bfd0:   0000                .word   0x0000bfd2:   0000                .word   0x0000bfd4:   0000                .word   0x0000bfd6:   0000                .word   0x0000bfd8:   0000                .word   0x0000bfda:   0000                .word   0x0000bfdc:   0000                .word   0x0000bfde:   0000                .word   0x0000bfe0:   0000                .word   0x0000bfe2:   0000                .word   0x0000bfe4:   0000                .word   0x0000bfe6:   0000                .word   0x0000bfe8:   0000                .word   0x0000bfea:   0000                .word   0x0000bfec:   0000                .word   0x0000bfee:   0000                .word   0x0000bff0:   0000                .word   0x0000bff2:   0000                .word   0x0000bff4:   0000                .word   0x0000bff6:   0000                .word   0x0000bff8:   0000                .word   0x0000bffa:   0000                .word   0x0000bffc:   0000                .word   0x0000bffe:   0000                .word   0x0000 36   {      displayCurrentSeconds():c000:   8221                SUB.W   #4,SP 37       volatile int lsd = currentSeconds % 10;c002:   421C 0200           MOV.W   &currentSeconds,R12c006:   403D 000A           MOV.W   #0x000a,R13c00a:   12B0 C20A           CALL    #__mspabi_divic00e:   4E81 0000           MOV.W   R14,0x0000(SP) 38       volatile int msd = currentSeconds / 10;c012:   421C 0200           MOV.W   &currentSeconds,R12c016:   403D 000A           MOV.W   #0x000a,R13c01a:   12B0 C20A           CALL    #__mspabi_divic01e:   4C81 0002           MOV.W   R12,0x0002(SP) 40       switch(lsd)c022:   412F                MOV.W   @SP,R15c024:   903F 000A           CMP.W   #0x000a,R15c028:   2C34                JHS     ($C$L12)c02a:   5F0F                RLA.W   R15c02c:   4F10 C030           BR      0xc030(R15)      $C$SW2:c030:   C08C C084           BIC.W   PC,0xc084(R12)c034:   C07C C074           BIC.B   #0xc074,R12c038:   C06C                BIC.B   @PC,R12c03a:   C064                BIC.B   @PC,R4c03c:   C05C C054           BIC.B   0x8092,R12c040:   C04C                BIC.B   PC,R12c042:   C044                BIC.B   PC,R4 70               P1OUT = 0x6F;      $C$L2:c044:   40F2 006F 0021      MOV.B   #0x006f,&Port_1_2_P1OUT 71               break;c04a:   3C23                JMP     ($C$L12) 67               P1OUT = 0x7F;      $C$L3:c04c:   40F2 007F 0021      MOV.B   #0x007f,&Port_1_2_P1OUT 68               break;c052:   3C1F                JMP     ($C$L12) 64               P1OUT = 0x07;      $C$L4:c054:   40F2 0007 0021      MOV.B   #0x0007,&Port_1_2_P1OUT 65               break;c05a:   3C1B                JMP     ($C$L12) 61               P1OUT = 0x7D;      $C$L5:c05c:   40F2 007D 0021      MOV.B   #0x007d,&Port_1_2_P1OUT 62               break;c062:   3C17                JMP     ($C$L12) 58               P1OUT = 0x6D;      $C$L6:c064:   40F2 006D 0021      MOV.B   #0x006d,&Port_1_2_P1OUT 59               break;c06a:   3C13                JMP     ($C$L12) 55               P1OUT = 0x66;      $C$L7:c06c:   40F2 0066 0021      MOV.B   #0x0066,&Port_1_2_P1OUT 56               break;c072:   3C0F                JMP     ($C$L12) 52               P1OUT = 0x4F;      $C$L8:c074:   40F2 004F 0021      MOV.B   #0x004f,&Port_1_2_P1OUT 53               break;c07a:   3C0B                JMP     ($C$L12) 49               P1OUT = 0x5B;      $C$L9:c07c:   40F2 005B 0021      MOV.B   #0x005b,&Port_1_2_P1OUT 50               break;c082:   3C07                JMP     ($C$L12) 46               P1OUT = 0x06;      $C$L10:c084:   40F2 0006 0021      MOV.B   #0x0006,&Port_1_2_P1OUT 47               break;c08a:   3C03                JMP     ($C$L12) 43               P1OUT = 0x3F;      $C$L11:c08c:   40F2 003F 0021      MOV.B   #0x003f,&Port_1_2_P1OUT 74       switch(msd)      $C$L12:c092:   411F 0002           MOV.W   0x0002(SP),R15c096:   903F 000A           CMP.W   #0x000a,R15c09a:   2C34                JHS     ($C$L23)c09c:   5F0F                RLA.W   R15c09e:   4F10 C0A2           BR      0xc0a2(R15)      $C$SW3:c0a2:   C0FE C0F6 C0EE      BIC.B   #0xc0f6,0xc0ee(R14)c0a8:   C0E6 C0DE           BIC.B   @PC,0xc0de(R6)c0ac:   C0D6 C0CE C0C6      BIC.B   0x817c,0xc0c6(R6)c0b2:   C0BE C0B6 40F2      BIC.W   #0xc0b6,0x40f2(R14)104               P2OUT = 0x6F;c0b8:   006F                .word   0x006Fc0ba:   0029                .word   0x0029105               break;c0bc:   3C23                JMP     ($C$L23)101               P2OUT = 0x7F;      $C$L14:c0be:   40F2 007F 0029      MOV.B   #0x007f,&Port_1_2_P2OUT102               break;c0c4:   3C1F                JMP     ($C$L23) 98               P2OUT = 0x07;      $C$L15:c0c6:   40F2 0007 0029      MOV.B   #0x0007,&Port_1_2_P2OUT 99               break;c0cc:   3C1B                JMP     ($C$L23) 95               P2OUT = 0x7D;      $C$L16:c0ce:   40F2 007D 0029      MOV.B   #0x007d,&Port_1_2_P2OUT 96               break;c0d4:   3C17                JMP     ($C$L23) 92               P2OUT = 0x6D;      $C$L17:c0d6:   40F2 006D 0029      MOV.B   #0x006d,&Port_1_2_P2OUT 93               break;c0dc:   3C13                JMP     ($C$L23) 89               P2OUT = 0x66;      $C$L18:c0de:   40F2 0066 0029      MOV.B   #0x0066,&Port_1_2_P2OUT 90               break;c0e4:   3C0F                JMP     ($C$L23) 86               P2OUT = 0x4F;      $C$L19:c0e6:   40F2 004F 0029      MOV.B   #0x004f,&Port_1_2_P2OUT 87               break;c0ec:   3C0B                JMP     ($C$L23) 83               P2OUT = 0x5B;      $C$L20:c0ee:   40F2 005B 0029      MOV.B   #0x005b,&Port_1_2_P2OUT 84               break;c0f4:   3C07                JMP     ($C$L23) 80               P2OUT = 0x06;      $C$L21:c0f6:   40F2 0006 0029      MOV.B   #0x0006,&Port_1_2_P2OUT 81               break;c0fc:   3C03                JMP     ($C$L23) 77               P2OUT = 0x3F;      $C$L22:c0fe:   40F2 003F 0029      MOV.B   #0x003f,&Port_1_2_P2OUT107   }      $C$L23:c104:   5221                ADD.W   #4,SPc106:   4130                RET     51    {      _auto_init():c108:   120A                PUSH    R10c10a:   1209                PUSH    R9114      if(__TI_BINIT_Base != __TI_BINIT_Limit)c10c:   403F 0000           MOV.W   #0x0000,R15c110:   903F 0000           CMP.W   #0x0000,R15c114:   2404                JEQ     ($C$L1)115         copy_in((COPY_TABLE *)__TI_BINIT_Base);c116:   403C 0000           MOV.W   #0x0000,R12c11a:   12B0 C176           CALL    #copy_in177      if (__TI_Handler_Table_Base != __TI_Handler_Table_Limit)      $C$L1:c11e:   403F C2C8           MOV.W   #0xc2c8,R15c122:   903F C2CA           CMP.W   #0xc2ca,R15c126:   2416                JEQ     ($C$L3)c128:   403F C2CA           MOV.W   #0xc2ca,R15c12c:   903F C2CE           CMP.W   #0xc2ce,R15c130:   2411                JEQ     ($C$L3)184           char const *load_addr   = *table_ptr++;c132:   403A C2CE           MOV.W   #0xc2ce,R10c136:   803A C2CA           SUB.W   #0xc2ca,R10c13a:   110A                RRA     R10c13c:   110A                RRA     R10c13e:   4039 C2CA           MOV.W   #0xc2ca,R9      $C$L2:c142:   493C                MOV.W   @R9+,R12186           char        handler_idx = *load_addr++;c144:   4C7F                MOV.B   @R12+,R15189           handler(load_addr, run_addr);c146:   5F0F                RLA.W   R15c148:   4F1F C2C8           MOV.W   0xc2c8(R15),R15c14c:   493D                MOV.W   @R9+,R13c14e:   128F                CALL    R15c150:   831A                DEC.W   R10c152:   23F7                JNE     ($C$L2)58        _system_post_cinit();      $C$L3:c154:   12B0 C2C2           CALL    #_system_post_cinit243      if (PINIT_BASE != PINIT_LIMIT)c158:   403F 0000           MOV.W   #0x0000,R15c15c:   903F 0000           CMP.W   #0x0000,R15c160:   2408                JEQ     ($C$L6)c162:   403A 0000           MOV.W   #0x0000,R10246         while (&(PINIT_BASE[i]) != PINIT_LIMIT)c166:   3C02                JMP     ($C$L5)247            PINIT_BASE[i++]();      $C$L4:c168:   4A3F                MOV.W   @R10+,R15c16a:   128F                CALL    R15246         while (&(PINIT_BASE[i]) != PINIT_LIMIT)      $C$L5:c16c:   903A 0000           CMP.W   #0x0000,R10c170:   23FB                JNE     ($C$L4)      $C$L6:c172:   4030 C2AA           BR      #__mspabi_func_epilog_2 68   {      copy_in():c176:   120A                PUSH    R10c178:   1209                PUSH    R9c17a:   4C09                MOV.W   R12,R9c17c:   491B 0002           MOV.W   0x0002(R9),R11 71      for (i = 0; i < tp->num_recs; i++)c180:   430A                CLR.W   R10c182:   3C22                JMP     ($C$L5) 73         COPY_RECORD crp = tp->recs[i];      $C$L1:c184:   4A0C                MOV.W   R10,R12c186:   403D 0006           MOV.W   #0x0006,R13c18a:   12B0 C27A           CALL    #__mspabi_mpyic18e:   590C                ADD.W   R9,R12c190:   4C1E 0008           MOV.W   0x0008(R12),R14 79         char *load_addr = (char *)crp.load_addr;c194:   4C1D 0004           MOV.W   0x0004(R12),R13 80         char *run_addr = (char *)crp.run_addr;c198:   4C1F 0006           MOV.W   0x0006(R12),R15c19c:   4F0C                MOV.W   R15,R12 83         if (crp.size)c19e:   930E                TST.W   R14c1a0:   200E                JNE     ($C$L2)100         else if (__TI_Handler_Table_Base != __TI_Handler_Table_Limit)c1a2:   403E C2C8           MOV.W   #0xc2c8,R14c1a6:   903E C2CA           CMP.W   #0xc2ca,R14c1aa:   240D                JEQ     ($C$L4)115            handler(load_addr, run_addr);c1ac:   4D6E                MOV.B   @R13,R14c1ae:   5E0E                RLA.W   R14c1b0:   4E1E C2C8           MOV.W   0xc2c8(R14),R14c1b4:   531D                INC.W   R13c1b6:   4D0C                MOV.W   R13,R12c1b8:   4F0D                MOV.W   R15,R13c1ba:   128E                CALL    R14c1bc:   3C02                JMP     ($C$L3) 96            memcpy(run_addr, load_addr, crp.size);      $C$L2:c1be:   12B0 C28E           CALL    #memcpy      $C$L3:c1c2:   491B 0002           MOV.W   0x0002(R9),R11 71      for (i = 0; i < tp->num_recs; i++)      $C$L4:c1c6:   531A                INC.W   R10      $C$L5:c1c8:   9B0A                CMP.W   R11,R10c1ca:   2BDC                JLO     ($C$L1)c1cc:   4030 C2AA           BR      #__mspabi_func_epilog_2 10       WDTCTL = WDTPW | WDTHOLD;	// Stop watchdog timer      main():c1d0:   40B2 5A80 0120      MOV.W   #0x5a80,&Watchdog_Timer_WDTCTL 12       P1DIR = 0xF7;c1d6:   40F2 00F7 0022      MOV.B   #0x00f7,&Port_1_2_P1DIR 13       P2DIR = 0xFF;c1dc:   43F2 002A           MOV.B   #-1,&Port_1_2_P2DIR 15       currentSeconds = 0;c1e0:   4382 0200           CLR.W   &currentSeconds 19           if(P1IN & 0x08 == 0)      $C$L1:c1e4:   425F 0020           MOV.B   &Port_1_2_P1IN,R15 24           displayCurrentSeconds();c1e8:   12B0 C000           CALL    #displayCurrentSeconds 25           currentSeconds++;c1ec:   5392 0200           INC.W   &currentSeconds 26           __delay_cycles(1000);c1f0:   120D                PUSH    R13c1f2:   403D 014B           MOV.W   #0x014b,R13      $1_$2:c1f6:   831D                DEC.W   R13c1f8:   23FE                JNE     ($1_$2)c1fa:   413D                POP.W   R13 28           if(currentSeconds >= 99)c1fc:   90B2 0063 0200      CMP.W   #0x0063,&currentSecondsc202:   3BF0                JL      ($C$L1) 30               currentSeconds = 0;c204:   4382 0200           CLR.W   &currentSecondsc208:   3FED                JMP     ($C$L1) 79   	CLR	R11      __mspabi_divi(), __mspabi_remi():c20a:   430B                CLR.W   R11 80   	TST	R13		; Determine divisor signc20c:   930D                TST.W   R13 81   	JGE	dvd_sign	; If positive, jump to get dividend signc20e:   3403                JGE     (dvd_sign) 82   	INV	R13		; If negative, negate value and...c210:   E33D                INV.W   R13 83   	INC	R13c212:   531D                INC.W   R13 84   	BIS	#1,R11		; Remember divisor was negativec214:   D31B                BIS.W   #1,R11 86   	TST	R12		; Test sign of divisor      dvd_sign:c216:   930C                TST.W   R12 87   	JGE	perform_divide	; If positive, ready to do dividec218:   3403                JGE     (perform_divide) 88   	INV	R12		; If negative, negate valuec21a:   E33C                INV.W   R12 89   	INC	R12		c21c:   531C                INC.W   R12 90   	INV	R11	    	; Establish sign of quotient and remainderc21e:   E33B                INV.W   R11 92   	CALL	#__divu		; Perform unsigned divide      perform_divide:c220:   12B0 C250           CALL    #__mspabi_divu 93   	BIT	#1,R11		; Get sign of quotientc224:   B31B                BIT.W   #1,R11 94   	JEQ	rem_sign	; If positive, quotient is readyc226:   2402                JEQ     (rem_sign) 95   	INV	R12		; If negative, negate quotient..... ...